@startuml
title Kombiniertes Klassendiagramm: Modularisierung von Training & Dosisberechnung

' Zentrale Manager-Klasse und Benutzereingabe
class BenutzerEingabe {
  +hochladenCTScan()
  +hochladenPartikelparameter()
  +startenTraining()
  +startenDosisberechnung()
  +anpassenParameter()
  +bestätigenErgebnis()
}

class SystemManager {
  +validiereDaten()
  +setzeTrainingsFlag()
  +starteTraining()
  +starteInferenz()
  +speichereErgebnisse()
}

' Parameterverwaltung (zentrale Konfiguration)
class ParameterManager {
  +resolutions: List<(float, float, float)>
  +energies: List<int>
  +batch_size: int
  +getParameter() : dict
}

' Datenmanagement (CT-Daten, Partikelparameter & DataLoader)
package "Datenmanagement" {
  class CTScan {
    -Dateiformat: Nifty
    -Auflösungsstufen: List<int>
  }
  
  class Partikelparameter {
    -EnergieStufen: List<float>
    -Spektrum: List<float>
  }
  
  class DataLoaderModule {
    +loadDataset(root_dir: str, section: str, energy: int): Dataset
    +splitDataset(dataset: Dataset, train_ratio: float): (Dataset, Dataset)
    +createDataLoader(dataset: Dataset, batch_size: int): DataLoader
  }
}

' Training und Validierung
package "Training" {
  class TrainingsPipeline {
    +herunterskalierenDaten()
    +trainiereNetz()
    +validiereNetz()
    +stoppeTraining()
  }
  class AutoencoderTrainer {
    +trainAutoencoder(train_loader: DataLoader, val_loader: DataLoader, n_epochs: int): Model
    +getBestModel() : Model
  }
  class DiffusionTrainer {
    +trainDiffusionModel(train_loader: DataLoader, n_epochs: int): Model
  }
  class EarlyStopping {
    +update(val_loss: float): Boolean
    +reset(): void
  }
}

' Inferenz und Visualisierung
package "Inferenz & Visualisierung" {
  class InferenceModule {
    +computeScalingFactor(latent: Tensor): float
    +runInference(input_noise: Tensor): Tensor
  }
  class Visualization {
    +zeige3DModell()
    +zoomFunktion()
    +rotation()
    +plotLearningCurves(lossList: List<float>)
    +plotAdversarialCurves(gen_loss: List<float>, disc_loss: List<float>)
  }
}

' Speicherung & Export
package "Speicherung" {
  class Storage {
    +speichereDosisverteilung()
    +logFehler()
    +exportiereErgebnisse()
    +saveModel(model: Model, path: str)
    +loadModel(path: str): Model
  }
}

' Beziehungen definieren:
BenutzerEingabe --> SystemManager : interagiert mit
SystemManager --> ParameterManager : nutzt Parameter
SystemManager --> DataLoaderModule : lädt Daten
SystemManager --> TrainingsPipeline : initiiert Training
TrainingsPipeline --> AutoencoderTrainer : trainiert Autoencoder
TrainingsPipeline --> DiffusionTrainer : trainiert Diffusionsmodell
AutoencoderTrainer --> EarlyStopping : überwacht Validierung
SystemManager --> InferenceModule : startet Inferenz
InferenceModule --> AutoencoderTrainer : nutzt trainierte Modelle
SystemManager --> Visualization : zeigt Ergebnisse
SystemManager --> Storage : speichert Modelle & Ergebnisse

CTScan <-- DataLoaderModule : enthält CT-Daten
Partikelparameter <-- DataLoaderModule : enthält Partikeldaten

@enduml